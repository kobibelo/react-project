import React, { useState, useEffect } from 'react';
import { SimpleTreeView } from '@mui/x-tree-view/SimpleTreeView';
import { TreeItem } from '@mui/x-tree-view/TreeItem';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { v4 as uuidv4 } from 'uuid';
import axios from 'axios';

const ExampleField = ({ field, onDrop, onUnlink }) => {
  const [{ isOver }, drop] = useDrop({
    accept: 'FIELD',
    drop: (item) => onDrop(item, field),
    collect: (monitor) => ({
      isOver: !!monitor.isOver(),
    }),
  });

  return (
    <div
      ref={drop}
      style={{
        padding: '15px',
        margin: '15px',
        border: '2px dashed #007bff',
        borderRadius: '12px',
        backgroundColor: isOver ? '#e0f7fa' : '#ffffff',
        position: 'relative',
        boxShadow: '0 6px 10px rgba(0, 0, 0, 0.15)',
        transition: 'background-color 0.3s ease',
      }}
    >
      <strong style={{ fontSize: '1.1em', color: '#007bff' }}>{field.name}</strong>
      {field.linkedFields && field.linkedFields.length > 0 && (
        <ul style={{ marginTop: '10px', paddingLeft: '20px', color: '#555' }}>
          {field.linkedFields.map((linkedField, index) => (
            <li key={index}>{`${linkedField.dbName} / ${linkedField.tableName} / ${linkedField.name}`}</li>
          ))}
        </ul>
      )}
      {field.linkedFields && field.linkedFields.length > 0 && (
        <button
          style={{
            position: 'absolute',
            top: '10px',
            right: '10px',
            backgroundColor: '#d32f2f',
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            padding: '6px 12px',
            cursor: 'pointer',
            transition: 'background-color 0.3s ease',
          }}
          onClick={() => onUnlink(field.id)}
        >
          Unlink All
        </button>
      )}
    </div>
  );
};

const DraggableField = ({ field }) => {
  const [{ isDragging }, drag] = useDrag({
    type: 'FIELD',
    item: field,
    collect: (monitor) => ({
      isDragging: !!monitor.isDragging(),
    }),
  });

  return (
    <div
      ref={drag}
      style={{
        opacity: isDragging ? 0.5 : 1,
        padding: '12px',
        margin: '10px',
        border: field.linked ? '2px solid #1e88e5' : '1px solid #ccc',
        borderRadius: '8px',
        backgroundColor: '#ffffff',
        cursor: 'move',
        boxShadow: '0 3px 6px rgba(0, 0, 0, 0.1)',
        transition: 'box-shadow 0.3s ease',
      }}
    >
      {field.name}
    </div>
  );
};

const ThirdStep = ({ mssqlServerName }) => {
  const [exampleFields, setExampleFields] = useState([
    { id: uuidv4(), name: 'Example Field 1', linkedFields: [] },
    { id: uuidv4(), name: 'Example Field 2', linkedFields: [] },
    { id: uuidv4(), name: 'Example Field 3', linkedFields: [] },
  ]);
  const [tree, setTree] = useState([]);
  const [query, setQuery] = useState('');
  const [savedQueries, setSavedQueries] = useState([]);
  const [queryResult, setQueryResult] = useState(null);
  const [expandedNodes, setExpandedNodes] = useState([]);
  const [queryValidation, setQueryValidation] = useState(null); // null, 'valid', 'invalid'


  useEffect(() => {
    const fetchDatabases = async () => {
      try {
        const response = await axios.post('http://localhost:3001/get-databases', {
          serverName: mssqlServerName,
        });
        const databases = response.data.databases;
        const updatedTree = databases.map((dbName) => ({
          id: uuidv4(),
          name: dbName,
          children: [],
          loaded: false,
          type: 'Database',
        }));
        setTree(updatedTree);
      } catch (error) {
        console.error('Error fetching databases:', error);
      }
    };

    fetchDatabases();
  }, []);

  const validateQuery = async (query) => {
    if (!query.trim()) {
      setQueryValidation(null); // אם אין טקסט, אין חיווי
      return;
    }
    try {
      const response = await axios.post('http://localhost:3001/validate-query', { query });
      setQueryValidation(response.data.isValid ? 'valid' : 'invalid');
    } catch (error) {
      console.error('Error validating query:', error);
      setQueryValidation('invalid');
    }
  };

  const updateTreeWithQueryResult = (queryResult) => {
    setTree((prevTree) => {
      // מציאת או יצירת צומת QUERY
      let queryNode = prevTree.find((node) => node.name === "QUERY");
      if (!queryNode) {
        queryNode = {
          id: uuidv4(),
          name: "QUERY",
          children: [],
          loaded: true,
        };
        prevTree = [...prevTree, queryNode];
      }

      // מציאת או הוספת בסיס הנתונים
      const databaseName = queryResult.currentDatabase || "Unknown Database";
      let databaseNode = queryNode.children.find((node) => node.name === databaseName);
      if (!databaseNode) {
        databaseNode = {
          id: uuidv4(),
          name: databaseName,
          children: [],
          loaded: true,
          type: 'Database',
        };
        queryNode.children.push(databaseNode);
      }

      // מעבר על headers להוספת טבלאות ושדות
      queryResult.headers.forEach((header) => {
        const sourceParts = header.source.split(".");
        if (sourceParts.length < 3) {
          console.warn("Invalid source format:", header.source);
          return;
        }

        const tableName = sourceParts[2].replace(/[\[\]]/g, ""); // ניקוי סוגריים מרובעים
        const fieldName = header.name;

        // מציאת או יצירת טבלה
        let tableNode = databaseNode.children.find((node) => node.name === tableName);
        if (!tableNode) {
          tableNode = {
            id: uuidv4(),
            name: tableName,
            children: [],
            loaded: true,
            type: 'Table',
          };
          databaseNode.children.push(tableNode);
        }

        // הוספת שדה אם אינו קיים
        const fieldExists = tableNode.children.some((node) => node.name === fieldName);
        if (!fieldExists) {
          tableNode.children.push({
            id: uuidv4(),
            name: fieldName,
            type: 'Field',
          });
        }
      });

      console.log("Updated tree:", JSON.stringify(prevTree, null, 2));
      return [...prevTree];
    });
  };


  const handleLoadTables = async (dbId, dbName) => {
    try {
      const tablesResponse = await axios.post('http://localhost:3001/get-tables', {
        serverName: mssqlServerName,
        databaseName: dbName,
      });
      const tables = tablesResponse.data.tables;
      const updatedTree = tree.map((db) =>
        db.id === dbId
          ? {
            ...db,
            children: tables.map((tableName) => ({
              id: uuidv4(),
              name: tableName,
              children: [],
              loaded: false,
              type: 'Table',
            })),
            loaded: true,
          }
          : db
      );
      setTree(updatedTree);
    } catch (error) {
      console.error('Error fetching tables:', error);
    }
  };

  const handleLoadFields = async (dbId, tableId, dbName, tableName) => {
    try {
      const fieldsResponse = await axios.post('http://localhost:3001/get-fields', {
        serverName: mssqlServerName,
        databaseName: dbName,
        tableName,
      });
      const fields = fieldsResponse.data.fields;
      const updatedTree = tree.map((db) =>
        db.id === dbId
          ? {
            ...db,
            children: db.children.map((table) =>
              table.id === tableId
                ? {
                  ...table,
                  children: fields.map((fieldName) => ({
                    id: uuidv4(),
                    name: fieldName,
                    dbName,
                    tableName,
                    linked: false,
                    type: 'Field',
                  })),
                  loaded: true,
                }
                : table
            ),
          }
          : db
      );
      setTree(updatedTree);
    } catch (error) {
      console.error('Error fetching fields:', error);
    }
  };

  const handleDrop = (draggedField, targetField) => {
    setExampleFields((prevFields) =>
      prevFields.map((field) =>
        field.id === targetField.id
          ? {
            ...field,
            linkedFields: [...(field.linkedFields || []), draggedField],
          }
          : field
      )
    );
    setTree((prevTree) =>
      prevTree.map((db) => ({
        ...db,
        children: db.children.map((table) => ({
          ...table,
          children: table.children.map((field) =>
            field.id === draggedField.id ? { ...field, linked: true } : field
          ),
        })),
      }))
    );
  };

  const handleUnlink = (fieldId) => {
    const fieldsToUnlink = exampleFields.find((field) => field.id === fieldId)?.linkedFields || [];
    setExampleFields((prevFields) =>
      prevFields.map((field) =>
        field.id === fieldId ? { ...field, linkedFields: [] } : field
      )
    );
    setTree((prevTree) =>
      prevTree.map((db) => ({
        ...db,
        children: db.children.map((table) => ({
          ...table,
          children: table.children.map((field) =>
            fieldsToUnlink.some((linkedField) => linkedField.id === field.id)
              ? { ...field, linked: false }
              : field
          ),
        })),
      }))
    );
  };

  const handleToggleNode = (node, parent) => {
    const nodeId = node.id;
    // nodeId, dbId, dbName, tableId, tableName
    if (expandedNodes.includes(nodeId)) {
      setExpandedNodes((prev) => prev.filter((id) => id !== nodeId));
    } else {
      setExpandedNodes((prev) => [...prev, nodeId]);

      if (!node.type) {
        return
      }

      if (node.type === 'Database') {
        const dbId = node.id;
        const dbName = node.name;

        // Load tables if it wasn't loaded
        if (!node.loaded) {
          handleLoadTables(dbId, dbName);
        }
      } else if (node.type === 'Table' && parent?.type === 'Database') {
        const tableId = node.id;
        const tableName = node.name;
        const dbId = parent.id;
        const dbName = parent.name;

        if (!node.loaded) {
          handleLoadFields(dbId, tableId, dbName, tableName);
        }
      }
    }
  };

  const handleQueryExecution = async () => {
    if (!query) {
      console.log('No query provided.');
      return;
    }

    try {
      const response = await axios.post('http://localhost:3001/execute-query', { query });

      if (response.data.success) {
        console.log('Query Result with Source:', response.data.result);
        setQueryResult(response.data.result); // שמירה של תוצאת ה-Query

        // עדכון העץ עם תוצאות ה-Query
        updateTreeWithQueryResult(response.data.result);
      } else {
        console.error('Query execution failed:', response.data.message);
      }
    } catch (error) {
      console.error('Error executing query:', error);
    }
  };

  const handleSaveQuery = () => {
    if (query.trim() !== '') {
      setSavedQueries([...savedQueries, query]);
      setQuery(''); // Reset query field after saving
    }
  };

  const handleLoadQuery = (selectedQuery) => {
    setQuery(selectedQuery);
  };

  const renderTree = (node, parent = null, depth = 0) => {
    if (node.type === 'Field') {
      const field = node;

      // Render only the DraggableField for leaf nodes
      return (
        <div key={field.id} style={{ display: 'flex', alignItems: 'center', color: field.linked ? '#1e88e5' : '#000' }}>
          <DraggableField field={field} />
        </div>
      );
    }

    // Determine heading level based on depth
    const headingTag = depth === 0 ? 'h4' : 'h5';

    return (
      <div key={node.id} style={{ marginLeft: `${depth * 20}px` }}>
        {React.createElement(
          headingTag,
          {
            style: {
              color: depth === 0 ? '#333' : '#666',
              cursor: 'pointer',
              fontWeight: depth === 0 ? '600' : '500',
            },
            onClick: () => handleToggleNode(node, parent),
          },
          <>
            {expandedNodes.includes(node.id) ? '▼' : '▶'} {node.name}
          </>
        )}
        {expandedNodes.includes(node.id) &&
          node.children.map((child) => renderTree(child, node, depth + 1))}
      </div>
    );
  };
  const [isQueryVisible, setIsQueryVisible] = useState(false);

  const toggleQueryVisibility = () => {
    setIsQueryVisible((prev) => !prev);
  };
  
  return (
    <DndProvider backend={HTML5Backend}>
      <div style={{ display: 'flex', flexDirection: 'row', height: '100vh', backgroundColor: '#f4f6f8' }}>
        {/* צד שמאל - TreeView */}
        <div style={{ flex: 1.5, padding: '20px', overflow: 'hidden', backgroundColor: '#ffffff', borderRight: '1px solid #ddd' }}>
          <h3 style={{ color: '#007bff', marginBottom: '20px' }}>Database TreeView</h3>
          <div style={{ maxHeight: '70%', overflowY: 'auto', marginBottom: '10px' }}>
            {tree.map((db) => renderTree(db))}
          </div>
          {/* כפתור להציג את תצוגת ה-Query */}
          <button
            onClick={toggleQueryVisibility}
            style={{
              padding: '10px',
              backgroundColor: '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              fontWeight: '600',
              marginTop: '10px',
            }}
          >
            Show Query
          </button>
        </div>
  
        {/* צד ימין - Example Fields */}
        {/* צד ימין - Example Fields */}
<div style={{ flex: 1, padding: '20px', overflowY: 'auto', backgroundColor: '#f7f9fc' }}>
  <h3 style={{ color: '#007bff', marginBottom: '20px' }}>Example Fields</h3>
  {exampleFields.map((field) => (
    <ExampleField key={field.id} field={field} onDrop={handleDrop} onUnlink={handleUnlink} />
  ))}
</div>

  
        {/* חלון ה-Query */}
        {isQueryVisible && (
  <div
    style={{
      position: 'fixed',
      top: '0',
      left: '0',
      width: '100%',
      height: '100%',
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      zIndex: '1000',
    }}
  >
    <div
      style={{
        backgroundColor: 'white',
        padding: '20px',
        borderRadius: '12px',
        width: '80%',
        maxWidth: '800px',
        boxShadow: '0 6px 10px rgba(0, 0, 0, 0.3)',
        position: 'relative',
        overflowY: 'auto', // תמיכה ב-Scroll אם יש הרבה תוכן
        maxHeight: '90%', // למנוע גלישה של החלון מחוץ למסך
      }}
    >

      <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '10px' }}>
        <button
          onClick={handleQueryExecution}
          style={{
            padding: '10px 20px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer',
            fontWeight: '600',
          }}
        >
          Execute Query
        </button>
        <button
          onClick={handleSaveQuery}
          style={{
            padding: '10px 20px',
            backgroundColor: '#28a745',
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer',
            fontWeight: '600',
          }}
        >
          Save Query
        </button>
      </div>
      {queryResult && (
        <div style={{ marginTop: '20px' }}>
          <h4>Query Result:</h4>
          <table style={{ borderCollapse: 'collapse', width: '100%' }}>
            <thead>
              <tr>
                {queryResult.headers.map((header, index) => (
                  <th key={index} style={{ border: '1px solid #ddd', padding: '8px' }}>
                    {header.name}
                    <div style={{ fontSize: '0.8em', color: '#888' }}>{header.source || 'Unknown Source'}</div>
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {queryResult.data.map((row, rowIndex) => (
                <tr key={rowIndex}>
                  {queryResult.headers.map((header, colIndex) => (
                    <td key={colIndex} style={{ border: '1px solid #ddd', padding: '8px' }}>
                      {row[header.name]}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      <button
        onClick={toggleQueryVisibility}
        style={{
          position: 'absolute',
          top: '10px',
          right: '10px',
          backgroundColor: '#d32f2f',
          color: 'white',
          border: 'none',
          borderRadius: '8px',
          padding: '6px 12px',
          cursor: 'pointer',
          fontWeight: '600',
        }}
      >
        Close
      </button>
    </div>
  </div>
)}
      </div>
    </DndProvider>
  );
  
 
};
export default ThirdStep;
